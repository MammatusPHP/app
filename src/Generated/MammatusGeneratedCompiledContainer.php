<?php

declare(strict_types=1);

use DI\CompiledContainer;
use DI\Definition\Exception\InvalidDefinition;
use Mammatus\Boot\FallBackToEchoWhenEventLoopCompletesItsLoop;
use Monolog\Handler\HandlerInterface;
use Monolog\Logger;
use PHPDIDefinitions\Dummy;
use Psr\EventDispatcher\EventDispatcherInterface;
use Psr\Log\LoggerInterface;
use WyriHaximus\Broadcast\ContainerListenerProvider;
use WyriHaximus\Broadcast\Dispatcher;
use WyriHaximus\Monolog\Factory;
use WyriHaximus\PSR3\ContextLogger\ContextLogger;
use WyriHaximus\React\PSR3\Stdio\StdioLogger;

use const WyriHaximus\Constants\Boolean\TRUE_;

/**
 * This class has been auto-generated by PHP-DI.
 */
class MammatusGeneratedCompiledContainer extends CompiledContainer
{
    public const array METHOD_MAPPING =  [
        'PHPDIDefinitions\\Dummy' => 'get1',
        'Mammatus\\Boot\\FallBackToEchoWhenEventLoopCompletesItsLoop' => 'get2',
        'Psr\\Log\\LoggerInterface' => 'get3',
        'Monolog\\Logger' => 'get4',
        'subEntry1' => 'get5',
        'subEntry2' => 'get6',
        'subEntry3' => 'get7',
        'subEntry4' => 'get8',
        'Psr\\EventDispatcher\\EventDispatcherInterface' => 'get9',
        'config.logger.handlers' => 'get10',
        'config.mammatus.random' => 'get11',
    ];

    protected function get1(): mixed
    {
        return $this->resolveFactory(static fn (): Dummy => new Dummy(), Dummy::class);
    }

    protected function get2(): mixed
    {
        return $this->resolveFactory(static fn (Logger $logger): FallBackToEchoWhenEventLoopCompletesItsLoop => new FallBackToEchoWhenEventLoopCompletesItsLoop($logger), FallBackToEchoWhenEventLoopCompletesItsLoop::class);
    }

    protected function get3(): mixed
    {
        return $this->resolveFactory(static fn (FallBackToEchoWhenEventLoopCompletesItsLoop $logger): LoggerInterface => $logger, LoggerInterface::class);
    }

    protected function get5()
    {
                $value = $_ENV['APP_VERSION'] ?? $_SERVER['APP_VERSION'] ?? getenv('APP_VERSION');
        if ($value !== false) {
            return $value;
        }

        if (! true) {
            throw new InvalidDefinition("The environment variable 'APP_VERSION' has not been defined");
        }

        return 'dev-1760869484';
    }

    protected function get6()
    {
                $value = $_ENV['K8S_POD_NAME'] ?? $_SERVER['K8S_POD_NAME'] ?? getenv('K8S_POD_NAME');
        if ($value !== false) {
            return $value;
        }

        if (! true) {
            throw new InvalidDefinition("The environment variable 'K8S_POD_NAME' has not been defined");
        }

        return null;
    }

    protected function get7()
    {
                $value = $_ENV['K8S_NAMESPACE'] ?? $_SERVER['K8S_NAMESPACE'] ?? getenv('K8S_NAMESPACE');
        if ($value !== false) {
            return $value;
        }

        if (! true) {
            throw new InvalidDefinition("The environment variable 'K8S_NAMESPACE' has not been defined");
        }

        return null;
    }

    protected function get8()
    {
        return $this->delegateContainer->get('config.logger.handlers');
    }

    protected function get4(): mixed
    {
        return $this->resolveFactory(static function (
            string $version,
            array $handlers,
            string|null $k8sPodName,
            string|null $k8sNamespace,
        ): Logger {
            $logger = Factory::create('', StdioLogger::create()->withHideLevel(TRUE_), [
                'version' => $version,
                'k8s_pod_name' => $k8sPodName,
                'k8s_namespace' => $k8sNamespace,
            ]);

            foreach ($handlers as $handler) {
                if (! ($handler instanceof HandlerInterface)) {
                    continue;
                }

                $logger->pushHandler($handler);
            }

            return $logger;
        }, Logger::class, [
            'version' => $this->get5(),
            'k8sPodName' => $this->get6(),
            'k8sNamespace' => $this->get7(),
            'handlers' => $this->get8(),
        ]);
    }

    protected function get9(): mixed
    {
        return $this->resolveFactory(static fn (LoggerInterface $logger, ContainerListenerProvider $listenerProvider): Dispatcher => new Dispatcher(
            $listenerProvider,
            new ContextLogger(
                $logger,
                ['component' => 'event-dispatcher'],
                'event-dispatcher',
            ),
        ), EventDispatcherInterface::class);
    }

    protected function get10(): array
    {
        return [];
    }

    protected function get11(): string
    {
        return '83ca5fae5d05be5bcd334468a6';
    }
}
